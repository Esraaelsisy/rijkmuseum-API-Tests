{
	"info": {
		"_postman_id": "e3b20bf4-deb7-4c06-a5e0-819d854d3f8a",
		"name": "Rijksmuseum API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "38201107"
	},
	"item": [
		{
			"name": "Get Collections",
			"item": [
				{
					"name": "Get All Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response format is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"",
									"pm.test(\"Response contains 'artObjects' array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('artObjects');",
									"    pm.expect(jsonData.artObjects).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Each object has 'objectNumber', 'title', and 'principalOrFirstMaker'\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.artObjects.forEach(function(obj) {",
									"        pm.expect(obj).to.have.property('objectNumber');",
									"        pm.expect(obj).to.have.property('title');",
									"        pm.expect(obj).to.have.property('principalOrFirstMaker');",
									"    });",
									"});",
									"",
									"pm.test(\"'artObjects' array is not empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.artObjects.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Pagination returns correct number of objects\", function () {",
									"    var jsonData = pm.response.json();",
									"    var pageSize = pm.request.url.query.get(\"ps\") || 10; // Default to 10 if ps is not provided",
									"    pm.expect(jsonData.artObjects.length).to.eql(parseInt(pageSize));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/api/{{culture}}/collection?key={{key}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"api",
								"{{culture}}",
								"collection"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Collections Invalid Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has valid data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.artObjects).to.be.an('array');",
									"    pm.expect(jsonData.artObjects.length).to.be.above(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/api/nl/collection?key=0fiuZFh4",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"api",
								"nl",
								"collection"
							],
							"query": [
								{
									"key": "key",
									"value": "0fiuZFh4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search By Valid Involved Maker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has valid data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.artObjects).to.be.an('array');",
									"    pm.expect(jsonData.artObjects.length).to.be.above(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/api/nl/collection?key=0fiuZFh4",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"api",
								"nl",
								"collection"
							],
							"query": [
								{
									"key": "key",
									"value": "0fiuZFh4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search By Invalid Involved Maker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has valid data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.artObjects).to.be.an('array');",
									"    pm.expect(jsonData.artObjects.length).to.be.above(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/api/nl/collection?key=0fiuZFh4",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"api",
								"nl",
								"collection"
							],
							"query": [
								{
									"key": "key",
									"value": "0fiuZFh4"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Collection Details",
			"item": [
				{
					"name": "Search By Object Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response format is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Response contains 'artObject' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('artObject');",
									"});",
									"",
									"",
									"pm.test(\"artObject contains 'id', 'title', and 'principalOrFirstMaker'\", function () {",
									"    var jsonData = pm.response.json();",
									"    var artObject = jsonData.artObject;",
									"",
									"    pm.expect(artObject).to.have.property('id');",
									"    pm.expect(artObject).to.have.property('title');",
									"    pm.expect(artObject).to.have.property('principalOrFirstMaker');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/api/{{culture}}/collection/:object_number?key={{key}}&format={{format}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"api",
								"{{culture}}",
								"collection",
								":object_number"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "format",
									"value": "{{format}}"
								}
							],
							"variable": [
								{
									"key": "object_number",
									"value": "SK-C-5",
									"description": "The Night Watch"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search By Invalid Object Number Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid object number returns 404\", function () {",
									"    var jsonData = pm.response.json();",
									"    var objectNumber = pm.request.url.variables.get('object_number');",
									"",
									"    if (objectNumber === \"invalid\") {",
									"        pm.response.to.have.status(404);",
									"        pm.expect(jsonData).to.have.property('error');",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/api/{{culture}}/collection/:object_number?key={{key}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"api",
								"{{culture}}",
								"collection",
								":object_number"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								}
							],
							"variable": [
								{
									"key": "object_number",
									"value": "invalid"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Collection Tiles",
			"item": [
				{
					"name": "Get Tiles of Valid Object Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has 'levels' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('levels');",
									"});",
									"",
									"pm.test(\"'levels' array is not empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.levels.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Each level has 'name', 'tiles', and 'width'\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.levels.forEach(function(level) {",
									"        pm.expect(level).to.have.property('name');",
									"        pm.expect(level).to.have.property('tiles');",
									"        pm.expect(level).to.have.property('width');",
									"    });",
									"});",
									"",
									"pm.test(\"Each level has a non-empty 'tiles' array\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.levels.forEach(function(level) {",
									"        pm.expect(level.tiles.length).to.be.above(0);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/api/{{culture}}/collection/:object_number/tiles?key={{key}}&format={{format}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"api",
								"{{culture}}",
								"collection",
								":object_number",
								"tiles"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "format",
									"value": "{{format}}"
								}
							],
							"variable": [
								{
									"key": "object_number",
									"value": "SK-C-5",
									"description": "The Night Watch"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tiles of Invalid Object Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has valid data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.artObjects).to.be.an('array');",
									"    pm.expect(jsonData.artObjects.length).to.be.above(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/api/nl/collection?key=0fiuZFh4",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"api",
								"nl",
								"collection"
							],
							"query": [
								{
									"key": "key",
									"value": "0fiuZFh4"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}